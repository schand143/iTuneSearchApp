{"version":3,"sources":["components/SearchBar.js","components/ITuneList.js","components/Dashboard.js","components/App.js","index.js"],"names":["SearchBar","handleChange","e","preventDefault","textInput","document","getElementById","value","props","fetchITunesData","className","onSubmit","this","type","id","name","placeholder","autoFocus","Component","ITuneList","state","playing","playingSongId","togglePlay","prevSongAudio","currentSongAudio","pause","setState","play","iTunesData","resultCount","map","iTune","key","trackId","style","width","height","backgroundImage","artworkUrl100","onClick","src","previewUrl","preload","trackName","artistName","moment","releaseDate","format","collectionName","Dashboard","input","axios","get","then","response","data","results","catch","error","console","log","App","ReactDOM","render"],"mappings":"qSA4BeA,E,4MAzBbC,aAAe,SAACC,GACdA,EAAEC,iBACF,IAAIC,EAAYC,SAASC,eAAe,aAAaC,MACrD,EAAKC,MAAMC,gBAAgBL,I,uDAI3B,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,8BACb,0BAAMC,SAAUC,KAAKX,cACnB,2BACEY,KAAK,OACLC,GAAG,YACHC,KAAK,YACLC,YAAY,+BACZC,WAAS,W,GAjBCC,a,iBCmFTC,E,4MAjFbC,MAAQ,CACNC,SAAS,EACTC,cAAe,I,EAGjBC,WAAa,SAACT,GACZ,IAAIU,EAAgBnB,SAASC,eAAe,EAAKc,MAAME,eACnDG,EAAmBpB,SAASC,eAAeQ,GAC3C,EAAKM,MAAMC,QACT,EAAKD,MAAME,gBAAkBR,GAC/BU,EAAcE,QACd,EAAKC,UAAS,iBAAO,CACnBN,SAAS,EACTC,cAAe,SAGjBE,EAAcE,QACdD,EAAiBG,OACjB,EAAKD,UAAS,iBAAO,CACnBN,SAAS,EACTC,cAAeR,QAInBW,EAAiBG,OACjB,EAAKD,UAAS,iBAAO,CACnBN,SAAS,EACTC,cAAeR,Q,uDAKX,IAAD,SAC6BF,KAAKJ,MAAjCqB,EADD,EACCA,WAAYC,EADb,EACaA,YAEpB,OACE,yBAAKpB,UAAU,yBACb,wBAAIA,UAAU,eACXoB,GACCD,EAAWE,KAAI,SAACC,GACd,OACE,wBAAIC,IAAKD,EAAME,SACb,yBAAKxB,UAAU,SACb,yBAAKA,UAAU,aACb,yBACEA,UAAU,cACVyB,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,gBAAgB,OAAD,OAASN,EAAMO,cAAf,QAGnB,yBACE7B,UAAU,aACV8B,QAAS,kBAAM,EAAKjB,WAAWS,EAAME,WAErC,2BACEpB,GAAIkB,EAAME,QACVO,IAAKT,EAAMU,WACXC,QAAQ,WAId,yBAAKjC,UAAU,cAAcsB,EAAMY,WACnC,yBAAKlC,UAAU,eAAesB,EAAMa,YACpC,yBAAKnC,UAAU,eAAf,YACYoC,IAAOd,EAAMe,aAAaC,OAAO,gBAE7C,yBAAKtC,UAAU,eAAf,eACesB,EAAMiB,2B,GAtEjB/B,a,iBCoCTgC,E,4MAjCb9B,MAAQ,CACNS,WAAY,GACZC,YAAa,G,EAGfrB,gBAAkB,SAAC0C,GACjBC,IACGC,IADH,+CAC+CF,IAC5CG,MAAK,SAACC,GAAc,IAAD,EACaA,EAASC,KAAlC1B,EADY,EACZA,YAAa2B,EADD,EACCA,QAEnB,EAAK9B,UAAS,iBAAO,CACnBE,WAAY4B,EACZ3B,qBAGH4B,OAAM,SAACC,GACNC,QAAQC,IAAIF,O,uDAIR,IACAlD,EAAoBG,KAApBH,gBADD,EAE6BG,KAAKQ,MAAjCS,EAFD,EAECA,WAAYC,EAFb,EAEaA,YACpB,OACE,6BACE,kBAAC,EAAD,CAAWrB,gBAAiBA,IAC5B,kBAAC,EAAD,CAAWoB,WAAYA,EAAYC,YAAaA,S,GA5BhCZ,a,MCOT4C,MARf,WACE,OACE,yBAAKpD,UAAU,OACb,kBAAC,EAAD,QCFNqD,IAASC,OAAO,kBAAC,EAAD,MAAS3D,SAASC,eAAe,W","file":"static/js/main.50a8ee97.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass SearchBar extends Component {\r\n  handleChange = (e) => {\r\n    e.preventDefault();\r\n    let textInput = document.getElementById('searchBar').value;\r\n    this.props.fetchITunesData(textInput);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='search-iTune-bar'>\r\n        <div className='search-itune-input-wrapper'>\r\n          <form onSubmit={this.handleChange}>\r\n            <input\r\n              type='text'\r\n              id='searchBar'\r\n              name='searchBar'\r\n              placeholder='Search song from iTune store'\r\n              autoFocus\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nclass ITuneList extends Component {\r\n  state = {\r\n    playing: false,\r\n    playingSongId: '',\r\n  };\r\n\r\n  togglePlay = (id) => {\r\n    var prevSongAudio = document.getElementById(this.state.playingSongId);\r\n    var currentSongAudio = document.getElementById(id);\r\n    if (this.state.playing) {\r\n      if (this.state.playingSongId === id) {\r\n        prevSongAudio.pause();\r\n        this.setState(() => ({\r\n          playing: false,\r\n          playingSongId: '',\r\n        }));\r\n      } else {\r\n        prevSongAudio.pause();\r\n        currentSongAudio.play();\r\n        this.setState(() => ({\r\n          playing: true,\r\n          playingSongId: id,\r\n        }));\r\n      }\r\n    } else {\r\n      currentSongAudio.play();\r\n      this.setState(() => ({\r\n        playing: true,\r\n        playingSongId: id,\r\n      }));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { iTunesData, resultCount } = this.props;\r\n\r\n    return (\r\n      <div className='search-itunes-results'>\r\n        <ol className='itunes-grid'>\r\n          {resultCount &&\r\n            iTunesData.map((iTune) => {\r\n              return (\r\n                <li key={iTune.trackId}>\r\n                  <div className='iTune'>\r\n                    <div className='iTune-top'>\r\n                      <div\r\n                        className='iTune-cover'\r\n                        style={{\r\n                          width: 128,\r\n                          height: 193,\r\n                          backgroundImage: `url(${iTune.artworkUrl100})`,\r\n                        }}\r\n                      ></div>\r\n                      <div\r\n                        className='itune-play'\r\n                        onClick={() => this.togglePlay(iTune.trackId)}\r\n                      >\r\n                        <audio\r\n                          id={iTune.trackId}\r\n                          src={iTune.previewUrl}\r\n                          preload='auto'\r\n                        ></audio>\r\n                      </div>\r\n                    </div>\r\n                    <div className='song-title'>{iTune.trackName}</div>\r\n                    <div className='song-artist'>{iTune.artistName}</div>\r\n                    <div className='song-artist'>\r\n                      Release: {moment(iTune.releaseDate).format('DD MMM YYYY')}\r\n                    </div>\r\n                    <div className='song-artist'>\r\n                      Collection: {iTune.collectionName}\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ITuneList;\r\n","import React, { Component } from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport ITuneList from './ITuneList';\r\nimport axios from 'axios';\r\n\r\nclass Dashboard extends Component {\r\n  state = {\r\n    iTunesData: [],\r\n    resultCount: 0,\r\n  };\r\n\r\n  fetchITunesData = (input) => {\r\n    axios\r\n      .get(`https://itunes.apple.com/search?term=${input}`)\r\n      .then((response) => {\r\n        let { resultCount, results } = response.data;\r\n\r\n        this.setState(() => ({\r\n          iTunesData: results,\r\n          resultCount,\r\n        }));\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { fetchITunesData } = this;\r\n    const { iTunesData, resultCount } = this.state;\r\n    return (\r\n      <div>\r\n        <SearchBar fetchITunesData={fetchITunesData} />\r\n        <ITuneList iTunesData={iTunesData} resultCount={resultCount} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport Dashboard from './Dashboard';\r\nimport '../../src/App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <Dashboard />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}